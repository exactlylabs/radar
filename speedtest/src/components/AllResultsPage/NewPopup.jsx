import styles from './new_popup.module.css';
import latencyIcon from '../../assets/latency-icon.svg';
import lossIcon from '../../assets/loss-icon.svg';
import homeIcon from '../../assets/home-icon.svg';
import workIcon from '../../assets/work-icon.svg';
import otherIcon from '../../assets/other-icon.svg';
import noInternetIcon from '../../assets/no-internet-icon.svg';
import wifiIcon from '../../assets/wifi-icon.svg';
import wiredIcon from '../../assets/wired-icon.svg';
import cellularIcon from '../../assets/cellular-icon.svg';
import priceIcon from '../../assets/price-icon.svg';
import ispIcon from '../../assets/isp-icon.svg';
import {
  CONNECTION_QUALTY_VALUES,
  DOWNLOAD_SPEED_LOW_TO_MID_THRESHOLD,
  UPLOAD_SPEED_LOW_TO_MID_THRESHOLD
} from "../../utils/speeds";

function DownloadIcon({variant}) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg"
         xmlnsXlink="http://www.w3.org/1999/xlink"
         width={16}
         height={16}
         className={styles.dataCellIcon}
         data-variant={variant}
    >
      <path fill="none" strokeWidth="1.5" strokeMiterlimit="10" transform="translate(1 1)" d="M14 7Q14 7.1718402 13.991568 7.3434739Q13.983135 7.5151072 13.966292 7.68612Q13.949449 7.8571329 13.924234 8.027113Q13.899019 8.197093 13.865496 8.3656311Q13.83197 8.5341702 13.790217 8.700861Q13.748464 8.8675518 13.698582 9.0319929Q13.648699 9.196434 13.590806 9.3582287Q13.532915 9.5200233 13.467155 9.6787834Q13.401394 9.8375435 13.327923 9.9928856Q13.254452 10.148228 13.173448 10.299777Q13.092443 10.451326 13.004099 10.598719Q12.915755 10.746111 12.820286 10.88899Q12.724816 11.03187 12.622452 11.169893Q12.520086 11.307918 12.411073 11.440753Q12.302058 11.573587 12.186657 11.700912Q12.071257 11.828238 11.949747 11.949747Q11.828238 12.071257 11.700912 12.186658Q11.573587 12.302058 11.440753 12.411073Q11.307918 12.520086 11.169893 12.622451Q11.03187 12.724816 10.88899 12.820286Q10.746111 12.915755 10.598719 13.004099Q10.451326 13.092443 10.299777 13.173449Q10.148228 13.254454 9.9928856 13.327925Q9.8375435 13.401396 9.6787834 13.467155Q9.5200233 13.532916 9.3582287 13.590808Q9.196434 13.648699 9.0319929 13.698583Q8.8675518 13.748465 8.700861 13.790218Q8.5341702 13.831971 8.3656311 13.865496Q8.197093 13.899019 8.027113 13.924234Q7.8571329 13.94945 7.68612 13.966293Q7.5151072 13.983136 7.3434734 13.991568Q7.1718402 14 7 14Q6.8281598 14 6.6565266 13.991568Q6.4848933 13.983135 6.3138804 13.966292Q6.1428671 13.949449 5.9728866 13.924234Q5.802906 13.899019 5.6343675 13.865496Q5.4658289 13.83197 5.2991385 13.790217Q5.1324482 13.748464 4.9680071 13.698582Q4.803566 13.648699 4.6417708 13.590806Q4.4799757 13.532915 4.3212156 13.467155Q4.1624556 13.401394 4.0071144 13.327923Q3.8517723 13.254452 3.700223 13.173448Q3.5486732 13.092443 3.4012804 13.004099Q3.2538881 12.915755 3.1110082 12.820286Q2.9681282 12.724816 2.8301048 12.622452Q2.6920815 12.520086 2.559247 12.411073Q2.4264126 12.302058 2.299087 12.186657Q2.171762 12.071257 2.0502524 11.949747Q1.9287429 11.828238 1.813342 11.700912Q1.6979411 11.573587 1.5889268 11.440753Q1.4799124 11.307918 1.3775473 11.169893Q1.275182 11.03187 1.1797127 10.88899Q1.0842432 10.746111 0.99589968 10.598719Q0.90755606 10.451326 0.82655108 10.299777Q0.74554604 10.148228 0.67207485 9.9928856Q0.59860361 9.8375435 0.53284317 9.6787834Q0.46708274 9.5200233 0.40919149 9.3582287Q0.35130021 9.196434 0.30141759 9.0319929Q0.25153497 8.8675518 0.20978118 8.700861Q0.16802739 8.5341702 0.13450301 8.3656311Q0.10097862 8.197093 0.075764418 8.027113Q0.0505502 7.8571329 0.033706907 7.68612Q0.016863609 7.5151072 0.0084318044 7.3434734Q0 7.1718402 0 7Q0 6.8281598 0.0084318044 6.6565266Q0.016863609 6.4848933 0.033706907 6.3138804Q0.0505502 6.1428671 0.07576441 5.9728866Q0.10097862 5.802906 0.13450301 5.6343675Q0.16802739 5.4658289 0.20978117 5.2991385Q0.25153497 5.1324482 0.30141759 4.9680071Q0.35130021 4.803566 0.40919146 4.6417708Q0.46708274 4.4799757 0.53284317 4.3212156Q0.59860361 4.1624556 0.67207479 4.0071144Q0.74554598 3.8517723 0.82655102 3.700223Q0.90755594 3.5486732 0.99589956 3.4012804Q1.0842431 3.2538881 1.1797125 3.1110082Q1.2751819 2.9681282 1.3775471 2.8301048Q1.4799123 2.6920815 1.5889268 2.559247Q1.6979411 2.4264126 1.8133421 2.299087Q1.9287429 2.171762 2.0502524 2.0502524Q2.171762 1.9287429 2.299087 1.813342Q2.4264126 1.6979411 2.559247 1.5889268Q2.6920815 1.4799124 2.8301048 1.3775473Q2.9681282 1.275182 3.1110082 1.1797127Q3.2538881 1.0842432 3.4012806 0.99589968Q3.5486729 0.90755606 3.7002227 0.82655108Q3.8517723 0.74554604 4.0071139 0.67207485Q4.1624556 0.59860361 4.3212156 0.53284317Q4.4799757 0.46708274 4.6417708 0.40919149Q4.803566 0.35130021 4.9680071 0.30141759Q5.1324482 0.25153497 5.2991385 0.20978118Q5.4658289 0.16802739 5.6343675 0.13450301Q5.802906 0.10097862 5.9728866 0.075764418Q6.1428671 0.0505502 6.31388 0.033706907Q6.4848928 0.016863609 6.6565266 0.0084318044Q6.8281598 0 7 0Q7.1718402 0 7.3434739 0.0084318044Q7.5151072 0.016863609 7.68612 0.033706907Q7.8571329 0.0505502 8.027113 0.07576441Q8.197093 0.10097862 8.3656311 0.13450301Q8.5341702 0.16802739 8.700861 0.20978117Q8.8675518 0.25153497 9.0319929 0.30141759Q9.196434 0.35130021 9.3582287 0.40919146Q9.5200233 0.46708274 9.6787834 0.53284317Q9.8375435 0.59860361 9.9928856 0.67207479Q10.148228 0.74554598 10.299777 0.82655102Q10.451326 0.90755594 10.598719 0.99589956Q10.746111 1.0842431 10.88899 1.1797125Q11.03187 1.2751819 11.169893 1.3775471Q11.307918 1.4799123 11.440753 1.5889268Q11.573587 1.6979411 11.700912 1.8133421Q11.828238 1.9287429 11.949747 2.0502524Q12.071257 2.171762 12.186658 2.299087Q12.302058 2.4264126 12.411073 2.559247Q12.520086 2.6920815 12.622451 2.8301048Q12.724816 2.9681282 12.820286 3.1110082Q12.915755 3.2538881 13.004099 3.4012806Q13.092443 3.5486729 13.173449 3.7002227Q13.254454 3.8517723 13.327925 4.0071139Q13.401396 4.1624556 13.467155 4.3212156Q13.532916 4.4799757 13.590808 4.6417708Q13.648699 4.803566 13.698583 4.9680071Q13.748465 5.1324482 13.790218 5.2991385Q13.831971 5.4658289 13.865496 5.6343675Q13.899019 5.802906 13.924234 5.9728866Q13.94945 6.1428671 13.966293 6.31388Q13.983136 6.4848928 13.991568 6.6565266Q14 6.8281598 14 7Z"/>
      <path transform="translate(7.25 4)" d="M0.75 0C1.1642135 -7.6089797e-17 1.5 0.33578643 1.5 0.75L1.5 6.25C1.5 6.6642137 1.1642135 7 0.75 7C0.33578643 7 2.5363265e-17 6.6642137 0 6.25L0 0.75C-5.072653e-17 0.33578643 0.33578643 5.072653e-17 0.75 0Z" fillRule="evenodd"/>
      <path fill="none" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" transform="translate(4.87563 8.20672)" d="M0 0L3.1243687 3.1243687L6.2487373 0" fillRule="evenodd"/>
    </svg>
  )
}

function UploadIcon({variant}) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg"
         xmlnsXlink="http://www.w3.org/1999/xlink"
         width={16}
         height={16}
         className={styles.dataCellIcon}
         data-variant={variant}
    >
      <path fill="none" strokeWidth="1.5" strokeMiterlimit="10" transform="matrix(1 0 0 -1 1 15)" d="M14 7Q14 7.1718402 13.991568 7.3434739Q13.983135 7.5151072 13.966292 7.68612Q13.949449 7.8571329 13.924234 8.027113Q13.899019 8.197093 13.865496 8.3656311Q13.83197 8.5341702 13.790217 8.700861Q13.748464 8.8675518 13.698582 9.0319929Q13.648699 9.196434 13.590806 9.3582287Q13.532915 9.5200233 13.467155 9.6787834Q13.401394 9.8375435 13.327923 9.9928856Q13.254452 10.148228 13.173448 10.299777Q13.092443 10.451326 13.004099 10.598719Q12.915755 10.746111 12.820286 10.88899Q12.724816 11.03187 12.622452 11.169893Q12.520086 11.307918 12.411073 11.440753Q12.302058 11.573587 12.186657 11.700912Q12.071257 11.828238 11.949747 11.949747Q11.828238 12.071257 11.700912 12.186658Q11.573587 12.302058 11.440753 12.411073Q11.307918 12.520086 11.169893 12.622451Q11.03187 12.724816 10.88899 12.820286Q10.746111 12.915755 10.598719 13.004099Q10.451326 13.092443 10.299777 13.173449Q10.148228 13.254454 9.9928856 13.327925Q9.8375435 13.401396 9.6787834 13.467155Q9.5200233 13.532916 9.3582287 13.590808Q9.196434 13.648699 9.0319929 13.698583Q8.8675518 13.748465 8.700861 13.790218Q8.5341702 13.831971 8.3656311 13.865496Q8.197093 13.899019 8.027113 13.924234Q7.8571329 13.94945 7.68612 13.966293Q7.5151072 13.983136 7.3434734 13.991568Q7.1718402 14 7 14Q6.8281598 14 6.6565266 13.991568Q6.4848933 13.983135 6.3138804 13.966292Q6.1428671 13.949449 5.9728866 13.924234Q5.802906 13.899019 5.6343675 13.865496Q5.4658289 13.83197 5.2991385 13.790217Q5.1324482 13.748464 4.9680071 13.698582Q4.803566 13.648699 4.6417708 13.590806Q4.4799757 13.532915 4.3212156 13.467155Q4.1624556 13.401394 4.0071144 13.327923Q3.8517723 13.254452 3.700223 13.173448Q3.5486732 13.092443 3.4012804 13.004099Q3.2538881 12.915755 3.1110082 12.820286Q2.9681282 12.724816 2.8301048 12.622452Q2.6920815 12.520086 2.559247 12.411073Q2.4264126 12.302058 2.299087 12.186657Q2.171762 12.071257 2.0502524 11.949747Q1.9287429 11.828238 1.813342 11.700912Q1.6979411 11.573587 1.5889268 11.440753Q1.4799124 11.307918 1.3775473 11.169893Q1.275182 11.03187 1.1797127 10.88899Q1.0842432 10.746111 0.99589968 10.598719Q0.90755606 10.451326 0.82655108 10.299777Q0.74554604 10.148228 0.67207485 9.9928856Q0.59860361 9.8375435 0.53284317 9.6787834Q0.46708274 9.5200233 0.40919149 9.3582287Q0.35130021 9.196434 0.30141759 9.0319929Q0.25153497 8.8675518 0.20978118 8.700861Q0.16802739 8.5341702 0.13450301 8.3656311Q0.10097862 8.197093 0.075764418 8.027113Q0.0505502 7.8571329 0.033706907 7.68612Q0.016863609 7.5151072 0.0084318044 7.3434734Q0 7.1718402 0 7Q0 6.8281598 0.0084318044 6.6565266Q0.016863609 6.4848933 0.033706907 6.3138804Q0.0505502 6.1428671 0.07576441 5.9728866Q0.10097862 5.802906 0.13450301 5.6343675Q0.16802739 5.4658289 0.20978117 5.2991385Q0.25153497 5.1324482 0.30141759 4.9680071Q0.35130021 4.803566 0.40919146 4.6417708Q0.46708274 4.4799757 0.53284317 4.3212156Q0.59860361 4.1624556 0.67207479 4.0071144Q0.74554598 3.8517723 0.82655102 3.700223Q0.90755594 3.5486732 0.99589956 3.4012804Q1.0842431 3.2538881 1.1797125 3.1110082Q1.2751819 2.9681282 1.3775471 2.8301048Q1.4799123 2.6920815 1.5889268 2.559247Q1.6979411 2.4264126 1.8133421 2.299087Q1.9287429 2.171762 2.0502524 2.0502524Q2.171762 1.9287429 2.299087 1.813342Q2.4264126 1.6979411 2.559247 1.5889268Q2.6920815 1.4799124 2.8301048 1.3775473Q2.9681282 1.275182 3.1110082 1.1797127Q3.2538881 1.0842432 3.4012806 0.99589968Q3.5486729 0.90755606 3.7002227 0.82655108Q3.8517723 0.74554604 4.0071139 0.67207485Q4.1624556 0.59860361 4.3212156 0.53284317Q4.4799757 0.46708274 4.6417708 0.40919149Q4.803566 0.35130021 4.9680071 0.30141759Q5.1324482 0.25153497 5.2991385 0.20978118Q5.4658289 0.16802739 5.6343675 0.13450301Q5.802906 0.10097862 5.9728866 0.075764418Q6.1428671 0.0505502 6.31388 0.033706907Q6.4848928 0.016863609 6.6565266 0.0084318044Q6.8281598 0 7 0Q7.1718402 0 7.3434739 0.0084318044Q7.5151072 0.016863609 7.68612 0.033706907Q7.8571329 0.0505502 8.027113 0.07576441Q8.197093 0.10097862 8.3656311 0.13450301Q8.5341702 0.16802739 8.700861 0.20978117Q8.8675518 0.25153497 9.0319929 0.30141759Q9.196434 0.35130021 9.3582287 0.40919146Q9.5200233 0.46708274 9.6787834 0.53284317Q9.8375435 0.59860361 9.9928856 0.67207479Q10.148228 0.74554598 10.299777 0.82655102Q10.451326 0.90755594 10.598719 0.99589956Q10.746111 1.0842431 10.88899 1.1797125Q11.03187 1.2751819 11.169893 1.3775471Q11.307918 1.4799123 11.440753 1.5889268Q11.573587 1.6979411 11.700912 1.8133421Q11.828238 1.9287429 11.949747 2.0502524Q12.071257 2.171762 12.186658 2.299087Q12.302058 2.4264126 12.411073 2.559247Q12.520086 2.6920815 12.622451 2.8301048Q12.724816 2.9681282 12.820286 3.1110082Q12.915755 3.2538881 13.004099 3.4012806Q13.092443 3.5486729 13.173449 3.7002227Q13.254454 3.8517723 13.327925 4.0071139Q13.401396 4.1624556 13.467155 4.3212156Q13.532916 4.4799757 13.590808 4.6417708Q13.648699 4.803566 13.698583 4.9680071Q13.748465 5.1324482 13.790218 5.2991385Q13.831971 5.4658289 13.865496 5.6343675Q13.899019 5.802906 13.924234 5.9728866Q13.94945 6.1428671 13.966293 6.31388Q13.983136 6.4848928 13.991568 6.6565266Q14 6.8281598 14 7Z"/>
      <path transform="matrix(1 0 0 -1 7.25 12)" d="M0.75 0C1.1642135 -7.6089797e-17 1.5 0.33578643 1.5 0.75L1.5 6.25C1.5 6.6642137 1.1642135 7 0.75 7C0.33578643 7 2.5363265e-17 6.6642137 0 6.25L0 0.75C-5.072653e-17 0.33578643 0.33578643 5.072653e-17 0.75 0Z" fillRule="evenodd"/>
      <path fill="none" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" transform="matrix(1 0 0 -1 4.87563 7.79328)" d="M0 0L3.1243687 3.1243687L6.2487373 0" fillRule="evenodd"/>
    </svg>
  )
}

function PopupDataCell({title, value, unit, icon}) {
  return (
    <div className={styles.dataCell}>
      <div className={styles.dataCellFirstRow}>
        {(typeof icon === 'string') ? <img src={icon} alt={title}/> : <>{icon}</>}
        <p className={styles.dataCellFirstRowTitle}>{title}</p>
      </div>
      <div className={styles.dataCellSecondRow}>
        <p className={styles.dataCellValue}>{isNaN(value) ? 'N/A' : value}</p>
        { !isNaN(value) && <span className={styles.dataCellUnit}>{unit}</span> }
      </div>
    </div>
  );
}

function ConnectionDataCell({value, icon, fullWidth, isCost}) {

  const prettyPrintMoney = (value) => {
    const number = Number(value);
    // show 1 decimal place if the number is not an integer
    // show K for thousands, M for millions, B for billions
    if(number % 1 !== 0) return number.toFixed(1);
    if(number >= 1e9) return (number / 1e9).toFixed(1) + 'B';
    if(number >= 1e6) return (number / 1e6).toFixed(1) + 'M';
    if(number >= 1e3) return (number / 1e3).toFixed(1) + 'K';
    return number;
  }

  return (
    <div className={styles.connectionDataCell} data-full-width={fullWidth}>
      <img src={icon} width={16} height={16} alt={`${value} icon`}/>
      <p className={styles.connectionDataValue}>{isCost ? `$${prettyPrintMoney(value)}/month` : value}</p>
    </div>
  )
}

export default function NewPopup({test}) {

  const getIconColor = (value, type) => {
    if(type === 'download') {
      if(value < DOWNLOAD_SPEED_LOW_TO_MID_THRESHOLD.MID) return 'low';
      else if(value < DOWNLOAD_SPEED_LOW_TO_MID_THRESHOLD.HIGH) return 'medium';
      else return 'high';
    } else {
      if(value < UPLOAD_SPEED_LOW_TO_MID_THRESHOLD.MID) return 'low';
      else if(value < UPLOAD_SPEED_LOW_TO_MID_THRESHOLD.HIGH) return 'medium';
      else return 'high';
    }
  }

  const getAddressFirstLine = () => {
    let line = `${test.street}`;
    if(test.house_number) line = `${test.house_number} ${line}`;
    return line;
  }

  const getAddressSecondLine = () => {
    let line = '';
    if(test.city) line = test.city;
    if(test.state) {
      if(line !== '') line += ', ';
      line += test.state;
    }
    if(test.postal_code) {
      if(line !== '') {
        if(!line.includes(',')) line += ",";
        line += ' ';
      }
      line += test.postal_code;
    }
    return line;
  }

  const getConnectionQuality = () => {
    if(test.connection_quality === CONNECTION_QUALTY_VALUES.UNSERVED) return 'Unserved';
    else if(test.connection_quality === CONNECTION_QUALTY_VALUES.UNDERSERVED) return 'Underserved';
    else return 'Served';
  }

  const getNetworkLocationIcon = () => {
    switch(test.network_location.toLowerCase()) {
      case 'home':
        return homeIcon;
      case 'work':
        return workIcon;
      case 'other':
        return otherIcon;
    }
  }

  const getNetworkTypeIcon = () => {
    switch(test.network_type.toLowerCase()) {
      case 'wifi':
        return wifiIcon;
      case 'wired':
        return wiredIcon;
      case 'cellular':
        return cellularIcon;
      default:
        return noInternetIcon;
    }
  }

  const hasContentBelow = () => {
    return test.network_location || test.network_type || test.network_cost || test.autonomous_system_org_name;
  }

  const formatNetworkType = (type) => {
    if(type.toLowerCase() === 'wifi') return 'WiFi';
    return upcaseFirstLetter(type);
  }

  const upcaseFirstLetter = word => word.charAt(0).toUpperCase() + word.slice(1);

  return (
    <div className={styles.popup}>
      <section className={styles.addressContainer} data-test-connection-quality={test.connection_quality}>
        { <p className={styles.firstAddressLine}>{(!test.street && !test.house_number) ? getAddressSecondLine() : getAddressFirstLine()}</p> }
        { (test.street || test.house_number) && <p className={styles.secondAddressLine}>{getAddressSecondLine()}</p> }
        <div className={styles.qualityBadge} data-test-connection-quality={test.connection_quality}>{getConnectionQuality()}</div>
      </section>
      <section className={styles.dataContainer} data-has-content-below={hasContentBelow()}>
        <PopupDataCell title={'Download'}
                       value={parseFloat(Number(test.download_avg).toFixed(2))}
                       unit={'Mbps'}
                       icon={<DownloadIcon variant={getIconColor(test.download_avg, 'download')}/> }
        />
        <PopupDataCell title={'Upload'}
                       value={parseFloat(Number(test.upload_avg).toFixed(2))}
                       unit={'Mbps'}
                       icon={<UploadIcon variant={getIconColor(test.upload_avg, 'upload')}/>}
                       iconVariant={getIconColor(test.upload_avg, 'upload')}
        />
        <PopupDataCell title={'Latency'} value={parseFloat(Number(test.latency).toFixed(2))} unit={'ms'} icon={latencyIcon}/>
        <PopupDataCell title={'Loss'} value={parseFloat(Number(test.loss).toFixed(2))} unit={'%'} icon={lossIcon}/>
      </section>
      { hasContentBelow() &&
        <section className={styles.propertiesContainer}>
          <div className={styles.connectionDataContainer}>
            { test.network_location && <ConnectionDataCell value={upcaseFirstLetter(test.network_location)} icon={getNetworkLocationIcon()}/>}
            { test.network_location && ( test.network_type || !!test.network_cost && test.network_cost > 0 ) && <div className={styles.cellDivider}></div> }
            { test.network_type && <ConnectionDataCell value={formatNetworkType(test.network_type)} icon={getNetworkTypeIcon()} /> }
            { test.network_type && !!test.network_cost && test.network_cost > 0 && <div className={styles.cellDivider}></div> }
            { !!test.network_cost && test.network_cost > 0 && <ConnectionDataCell value={test.network_cost} icon={priceIcon} isCost/> }
          </div>
          { test.autonomous_system_org_name && <ConnectionDataCell value={test.autonomous_system_org_name} icon={ispIcon} fullWidth={true}/> }
        </section>
      }
    </div>
  )
}