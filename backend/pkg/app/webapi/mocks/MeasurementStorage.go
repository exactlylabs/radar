// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storages "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/storages"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MeasurementStorage is an autogenerated mock type for the MeasurementStorage type
type MeasurementStorage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MeasurementStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *MeasurementStorage) Connected() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, it
func (_m *MeasurementStorage) Insert(ctx context.Context, it storages.MeasurementIterator) error {
	ret := _m.Called(ctx, it)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storages.MeasurementIterator) error); ok {
		r0 = rf(ctx, it)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LastDate provides a mock function with given fields: ctx
func (_m *MeasurementStorage) LastDate(ctx context.Context) (*time.Time, error) {
	ret := _m.Called(ctx)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(context.Context) *time.Time); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *MeasurementStorage) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMeasurementStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeasurementStorage creates a new instance of MeasurementStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeasurementStorage(t mockConstructorTestingTNewMeasurementStorage) *MeasurementStorage {
	mock := &MeasurementStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
