// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	storages "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/storages"
	mock "github.com/stretchr/testify/mock"
)

// ASNOrgStorage is an autogenerated mock type for the ASNOrgStorage type
type ASNOrgStorage struct {
	mock.Mock
}

// All provides a mock function with given fields: limit, offset
func (_m *ASNOrgStorage) All(limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(*int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int, *int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllFromGeospace provides a mock function with given fields: geospaceId, limit, offset
func (_m *ASNOrgStorage) AllFromGeospace(geospaceId string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(geospaceId, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(geospaceId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *int, *int) error); ok {
		r1 = rf(geospaceId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ASNOrgStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: a
func (_m *ASNOrgStorage) Create(a *storages.ASNOrg) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storages.ASNOrg) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ASNOrgStorage) Get(id string) (*storages.ASNOrg, error) {
	ret := _m.Called(id)

	var r0 *storages.ASNOrg
	if rf, ok := ret.Get(0).(func(string) *storages.ASNOrg); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.ASNOrg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrgName provides a mock function with given fields: name
func (_m *ASNOrgStorage) GetByOrgName(name string) (*storages.ASNOrg, error) {
	ret := _m.Called(name)

	var r0 *storages.ASNOrg
	if rf, ok := ret.Get(0).(func(string) *storages.ASNOrg); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.ASNOrg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *ASNOrgStorage) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: query, limit, offset
func (_m *ASNOrgStorage) Search(query string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(query, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *int, *int) error); ok {
		r1 = rf(query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFromGeospace provides a mock function with given fields: query, geospaceId, limit, offset
func (_m *ASNOrgStorage) SearchFromGeospace(query string, geospaceId string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(query, geospaceId, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(string, string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(query, geospaceId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *int, *int) error); ok {
		r1 = rf(query, geospaceId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewASNOrgStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewASNOrgStorage creates a new instance of ASNOrgStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewASNOrgStorage(t mockConstructorTestingTNewASNOrgStorage) *ASNOrgStorage {
	mock := &ASNOrgStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
