// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storages "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/storages"
	mock "github.com/stretchr/testify/mock"
)

// ASNOrgStorage is an autogenerated mock type for the ASNOrgStorage type
type ASNOrgStorage struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, limit, offset
func (_m *ASNOrgStorage) All(ctx context.Context, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(context.Context, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int, *int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllFromGeospace provides a mock function with given fields: ctx, geospaceId, limit, offset
func (_m *ASNOrgStorage) AllFromGeospace(ctx context.Context, geospaceId string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(ctx, geospaceId, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(ctx, geospaceId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *int, *int) error); ok {
		r1 = rf(ctx, geospaceId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ASNOrgStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *ASNOrgStorage) Connected() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, a
func (_m *ASNOrgStorage) Create(ctx context.Context, a *storages.ASNOrg) error {
	ret := _m.Called(ctx, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storages.ASNOrg) error); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *ASNOrgStorage) Get(ctx context.Context, id string) (*storages.ASNOrg, error) {
	ret := _m.Called(ctx, id)

	var r0 *storages.ASNOrg
	if rf, ok := ret.Get(0).(func(context.Context, string) *storages.ASNOrg); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.ASNOrg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrgName provides a mock function with given fields: ctx, name
func (_m *ASNOrgStorage) GetByOrgName(ctx context.Context, name string) (*storages.ASNOrg, error) {
	ret := _m.Called(ctx, name)

	var r0 *storages.ASNOrg
	if rf, ok := ret.Get(0).(func(context.Context, string) *storages.ASNOrg); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.ASNOrg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *ASNOrgStorage) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *ASNOrgStorage) Search(ctx context.Context, query string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *int, *int) error); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFromGeospace provides a mock function with given fields: ctx, query, geospaceId, limit, offset
func (_m *ASNOrgStorage) SearchFromGeospace(ctx context.Context, query string, geospaceId string, limit *int, offset *int) (storages.Iterator[*storages.ASNOrg], error) {
	ret := _m.Called(ctx, query, geospaceId, limit, offset)

	var r0 storages.Iterator[*storages.ASNOrg]
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *int, *int) storages.Iterator[*storages.ASNOrg]); ok {
		r0 = rf(ctx, query, geospaceId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.ASNOrg])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *int, *int) error); ok {
		r1 = rf(ctx, query, geospaceId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewASNOrgStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewASNOrgStorage creates a new instance of ASNOrgStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewASNOrgStorage(t mockConstructorTestingTNewASNOrgStorage) *ASNOrgStorage {
	mock := &ASNOrgStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
