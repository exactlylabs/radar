// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	namespaces "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/namespaces"
	mock "github.com/stretchr/testify/mock"

	storages "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/storages"
)

// SummariesStorage is an autogenerated mock type for the SummariesStorage type
type SummariesStorage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *SummariesStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *SummariesStorage) Connected() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *SummariesStorage) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Summarize provides a mock function with given fields: ctx
func (_m *SummariesStorage) Summarize(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SummaryForGeoAndASN provides a mock function with given fields: ctx, geospaceId, asnId, filter
func (_m *SummariesStorage) SummaryForGeoAndASN(ctx context.Context, geospaceId string, asnId string, filter storages.SummaryFilter) (*storages.GeospaceSummaryResult, error) {
	ret := _m.Called(ctx, geospaceId, asnId, filter)

	var r0 *storages.GeospaceSummaryResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string, storages.SummaryFilter) *storages.GeospaceSummaryResult); ok {
		r0 = rf(ctx, geospaceId, asnId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.GeospaceSummaryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, storages.SummaryFilter) error); ok {
		r1 = rf(ctx, geospaceId, asnId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SummaryForGeospace provides a mock function with given fields: ctx, geospaceId, filter
func (_m *SummariesStorage) SummaryForGeospace(ctx context.Context, geospaceId string, filter storages.SummaryFilter) (*storages.GeospaceSummaryResult, error) {
	ret := _m.Called(ctx, geospaceId, filter)

	var r0 *storages.GeospaceSummaryResult
	if rf, ok := ret.Get(0).(func(context.Context, string, storages.SummaryFilter) *storages.GeospaceSummaryResult); ok {
		r0 = rf(ctx, geospaceId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.GeospaceSummaryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, storages.SummaryFilter) error); ok {
		r1 = rf(ctx, geospaceId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SummaryForNamespace provides a mock function with given fields: ctx, namespace, filter
func (_m *SummariesStorage) SummaryForNamespace(ctx context.Context, namespace namespaces.Namespace, filter storages.SummaryFilter) ([]storages.GeospaceSummaryResult, error) {
	ret := _m.Called(ctx, namespace, filter)

	var r0 []storages.GeospaceSummaryResult
	if rf, ok := ret.Get(0).(func(context.Context, namespaces.Namespace, storages.SummaryFilter) []storages.GeospaceSummaryResult); ok {
		r0 = rf(ctx, namespace, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storages.GeospaceSummaryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, namespaces.Namespace, storages.SummaryFilter) error); ok {
		r1 = rf(ctx, namespace, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SummaryForNamespaceAndASN provides a mock function with given fields: ctx, namespace, asnId, filter
func (_m *SummariesStorage) SummaryForNamespaceAndASN(ctx context.Context, namespace namespaces.Namespace, asnId string, filter storages.SummaryFilter) ([]storages.GeospaceSummaryResult, error) {
	ret := _m.Called(ctx, namespace, asnId, filter)

	var r0 []storages.GeospaceSummaryResult
	if rf, ok := ret.Get(0).(func(context.Context, namespaces.Namespace, string, storages.SummaryFilter) []storages.GeospaceSummaryResult); ok {
		r0 = rf(ctx, namespace, asnId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storages.GeospaceSummaryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, namespaces.Namespace, string, storages.SummaryFilter) error); ok {
		r1 = rf(ctx, namespace, asnId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSummariesStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewSummariesStorage creates a new instance of SummariesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSummariesStorage(t mockConstructorTestingTNewSummariesStorage) *SummariesStorage {
	mock := &SummariesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
