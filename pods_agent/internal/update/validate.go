package update

import (
	"bytes"
	"crypto"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/exactlylabs/go-errors/pkg/errors"
	"github.com/exactlylabs/radar/pods_agent/config"
	"google.golang.org/protobuf/proto"
)

var (
	ErrInvalidCertificate  error = errors.NewSentinel("InvalidCertificate", "certificate is not valid")
	ErrCertificateRevoked  error = errors.NewSentinel("CertificateRevoked", "certificate revoked")
	ErrInvalidSignature    error = errors.NewSentinel("InvalidSignature", "signature is not valid")
	ErrCRLNotFound         error = errors.NewSentinel("CRLNotFound", "crl not found")
	ErrCRLExpired          error = errors.NewSentinel("CRLExpired", "CRL expired")
	ErrCRLInvalidSignature error = errors.NewSentinel("InvalidCRLSignature", "CRL not generated by CA")
	ErrEmptyFile           error = errors.NewSentinel("EmptyFile", "update file is empty")
	ErrVersionMismatch     error = errors.NewSentinel("VersionMismatch", "version mismatch")
	ErrInvalidPEMBlock     error = errors.NewSentinel("InvalidPEMBlock", "invalid PEM block")
)

func IsValidationError(err error) bool {
	return errors.Is(err, ErrInvalidCertificate) ||
		errors.Is(err, ErrCertificateRevoked) ||
		errors.Is(err, ErrInvalidSignature) ||
		errors.Is(err, ErrCRLNotFound) ||
		errors.Is(err, ErrCRLExpired) ||
		errors.Is(err, ErrCRLInvalidSignature)
}

// ParseUpdateFile will read from the reader and then validate the contents of it,
// ensuring that the file is a valid binary to update
func ParseUpdateFile(r io.Reader) ([]byte, error) {
	sb, err := readFile(r)
	if err != nil {
		return nil, errors.W(err)
	}
	rootCert, err := parseCertificate(rootCAFile)
	if err != nil {
		return nil, errors.W(err)
	}
	// Validating the Provider Certificate
	cert, err := parseCertificate(sb.GetCertificate())
	if err != nil {
		return nil, errors.W(err)
	}
	// Check if it's signed by our trusted CA
	if err := verifyCertificate(cert, rootCert); err != nil {
		return nil, errors.SentinelWithStack(ErrInvalidCertificate)
	}

	if err := verifyCertIsRevoked(cert, rootCert); IsValidationError(err) {
		return nil, err
	} else if err != nil {
		return nil, errors.SentinelWithStack(ErrCertificateRevoked)
	}

	// Validate the binary was not tampered
	if err := verifySignature(cert, sb.GetBinary(), sb.GetSignature()); err != nil {
		return nil, errors.SentinelWithStack(ErrInvalidSignature)
	}

	return sb.GetBinary(), nil
}

func readFile(r io.Reader) (*SignedBinary, error) {
	data, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, errors.Wrap(err, "failed to read file")
	}
	if len(data) == 0 {
		return nil, errors.SentinelWithStack(ErrEmptyFile)
	}
	sb := &SignedBinary{}
	if err := proto.Unmarshal(data, sb); err != nil {
		return nil, errors.Wrap(err, "failed to unmarshal protofile")
	}
	return sb, nil
}

func parseCertificate(data []byte) (*x509.Certificate, error) {
	block, _ := pem.Decode(data)
	if block == nil {
		return nil, errors.SentinelWithStack(ErrInvalidPEMBlock)
	}
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		return nil, errors.Wrap(err, "failed to parse certificate")
	}
	return cert, nil
}

func verifyCertificate(binCert, rootCert *x509.Certificate) error {
	if err := binCert.CheckSignatureFrom(rootCert); err != nil {
		return errors.Wrap(err, "failed to verify certificate signature")
	}
	return nil
}

func verifyCertIsRevoked(binCert, rootCert *x509.Certificate) error {
	crl, err := loadCRL()
	if err != nil {
		return errors.W(err)
	}
	if err := rootCert.CheckCRLSignature(crl); err != nil {
		return errors.SentinelWithStack(ErrCRLInvalidSignature)
	}
	if crl.HasExpired(time.Now()) {
		return errors.SentinelWithStack(ErrCRLExpired)
	}
	for _, revoked := range crl.TBSCertList.RevokedCertificates {
		if revoked.SerialNumber != nil && revoked.SerialNumber.Cmp(binCert.SerialNumber) == 0 {
			return errors.SentinelWithStack(ErrCertificateRevoked)
		}
	}
	return nil
}

func loadCRL() (*pkix.CertificateList, error) {
	crlUrl := config.LoadConfig().CRLUrl
	u, err := url.Parse(crlUrl)
	if err != nil {
		return nil, errors.SentinelWithStack(ErrCRLNotFound)
	}
	var crlBytes []byte
	if u.Scheme == "https" || u.Scheme == "http" {
		res, err := http.Get(crlUrl)
		if err != nil {
			return nil, errors.Wrap(err, "failed to get CRL").WithMetadata(errors.Metadata{"url": crlUrl})
		}
		defer res.Body.Close()
		crlBytes, err = ioutil.ReadAll(res.Body)
	} else if u.Scheme == "file" {
		f, err := os.Open(u.Host + u.Path)
		if err != nil {
			return nil, errors.Wrap(err, "failed to open CRL file").WithMetadata(errors.Metadata{"path": u.Host + u.Path})
		}
		defer f.Close()
		crlBytes, err = ioutil.ReadAll(f)
	} else {
		return nil, errors.New("invalid CRLUrl configuration")
	}
	if err != nil {
		return nil, errors.Wrap(err, "failed to load CRL").WithMetadata(errors.Metadata{"url": u.String()})
	}
	crlPem, _ := pem.Decode(crlBytes)
	crl, err := x509.ParseCRL(crlPem.Bytes)
	if err != nil {
		return nil, errors.Wrap(err, "failed to parse CRL")
	}
	return crl, nil
}

func verifySignature(binCert *x509.Certificate, binary []byte, signature []byte) error {
	hasher := sha256.New()
	hasher.Write(binary)
	binHash := hasher.Sum(nil)

	pbk := binCert.PublicKey.(*rsa.PublicKey)
	err := rsa.VerifyPKCS1v15(pbk, crypto.SHA256, binHash, signature)
	if err != nil {
		return errors.Wrap(err, "failed to verify signature")
	}
	return nil
}

func ParseSignedBinary(path string) (*SignedBinary, error) {
	s := &SignedBinary{}
	data, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, errors.Wrap(err, "failed to read file").WithMetadata(errors.Metadata{"path": path})
	}
	if err := proto.Unmarshal(data, s); err != nil {
		return nil, errors.Wrap(err, "failed to unmarshal protofile")
	}
	return s, nil
}

func validateBinaryVersion(binPath, expectedVersion string) error {
	cmd := exec.Command(binPath, "-v")
	stderr := new(bytes.Buffer)
	cmd.Stderr = stderr
	out, err := cmd.Output()
	if err != nil {
		return errors.Wrap(err, "error calling binary version: %s", string(out)).WithMetadata(errors.Metadata{
			"stderr": stderr.String(), "stdout": string(out), "binary": []string{binPath, "-v"},
		})
	}
	if !strings.Contains(string(out), expectedVersion) {
		return errors.SentinelWithStack(ErrVersionMismatch)
	}
	return nil
}
