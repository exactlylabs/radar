// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	time "time"

	network "github.com/exactlylabs/radar/pods_agent/services/sysinfo/network"
	mock "github.com/stretchr/testify/mock"
)

// MockSystemManager is an autogenerated mock type for the SystemManager type
type MockSystemManager struct {
	mock.Mock
}

type MockSystemManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemManager) EXPECT() *MockSystemManager_Expecter {
	return &MockSystemManager_Expecter{mock: &_m.Mock}
}

// EnsureBinaryPermissions provides a mock function with given fields: path
func (_m *MockSystemManager) EnsureBinaryPermissions(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for EnsureBinaryPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_EnsureBinaryPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureBinaryPermissions'
type MockSystemManager_EnsureBinaryPermissions_Call struct {
	*mock.Call
}

// EnsureBinaryPermissions is a helper method to define mock.On call
//   - path string
func (_e *MockSystemManager_Expecter) EnsureBinaryPermissions(path interface{}) *MockSystemManager_EnsureBinaryPermissions_Call {
	return &MockSystemManager_EnsureBinaryPermissions_Call{Call: _e.mock.On("EnsureBinaryPermissions", path)}
}

func (_c *MockSystemManager_EnsureBinaryPermissions_Call) Run(run func(path string)) *MockSystemManager_EnsureBinaryPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemManager_EnsureBinaryPermissions_Call) Return(_a0 error) *MockSystemManager_EnsureBinaryPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_EnsureBinaryPermissions_Call) RunAndReturn(run func(string) error) *MockSystemManager_EnsureBinaryPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureTailscale provides a mock function with given fields:
func (_m *MockSystemManager) EnsureTailscale() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnsureTailscale")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_EnsureTailscale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureTailscale'
type MockSystemManager_EnsureTailscale_Call struct {
	*mock.Call
}

// EnsureTailscale is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) EnsureTailscale() *MockSystemManager_EnsureTailscale_Call {
	return &MockSystemManager_EnsureTailscale_Call{Call: _e.mock.On("EnsureTailscale")}
}

func (_c *MockSystemManager_EnsureTailscale_Call) Run(run func()) *MockSystemManager_EnsureTailscale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_EnsureTailscale_Call) Return(_a0 error) *MockSystemManager_EnsureTailscale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_EnsureTailscale_Call) RunAndReturn(run func() error) *MockSystemManager_EnsureTailscale_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthLogFile provides a mock function with given fields:
func (_m *MockSystemManager) GetAuthLogFile() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthLogFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetAuthLogFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthLogFile'
type MockSystemManager_GetAuthLogFile_Call struct {
	*mock.Call
}

// GetAuthLogFile is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetAuthLogFile() *MockSystemManager_GetAuthLogFile_Call {
	return &MockSystemManager_GetAuthLogFile_Call{Call: _e.mock.On("GetAuthLogFile")}
}

func (_c *MockSystemManager_GetAuthLogFile_Call) Run(run func()) *MockSystemManager_GetAuthLogFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetAuthLogFile_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetAuthLogFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetAuthLogFile_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetAuthLogFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetBootConfig provides a mock function with given fields:
func (_m *MockSystemManager) GetBootConfig() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBootConfig")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetBootConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBootConfig'
type MockSystemManager_GetBootConfig_Call struct {
	*mock.Call
}

// GetBootConfig is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetBootConfig() *MockSystemManager_GetBootConfig_Call {
	return &MockSystemManager_GetBootConfig_Call{Call: _e.mock.On("GetBootConfig")}
}

func (_c *MockSystemManager_GetBootConfig_Call) Run(run func()) *MockSystemManager_GetBootConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetBootConfig_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetBootConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetBootConfig_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetBootConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCMDLine provides a mock function with given fields:
func (_m *MockSystemManager) GetCMDLine() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCMDLine")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetCMDLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCMDLine'
type MockSystemManager_GetCMDLine_Call struct {
	*mock.Call
}

// GetCMDLine is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetCMDLine() *MockSystemManager_GetCMDLine_Call {
	return &MockSystemManager_GetCMDLine_Call{Call: _e.mock.On("GetCMDLine")}
}

func (_c *MockSystemManager_GetCMDLine_Call) Run(run func()) *MockSystemManager_GetCMDLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetCMDLine_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetCMDLine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetCMDLine_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetCMDLine_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostname provides a mock function with given fields:
func (_m *MockSystemManager) GetHostname() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHostname")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostname'
type MockSystemManager_GetHostname_Call struct {
	*mock.Call
}

// GetHostname is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetHostname() *MockSystemManager_GetHostname_Call {
	return &MockSystemManager_GetHostname_Call{Call: _e.mock.On("GetHostname")}
}

func (_c *MockSystemManager_GetHostname_Call) Run(run func()) *MockSystemManager_GetHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetHostname_Call) Return(_a0 string, _a1 error) *MockSystemManager_GetHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetHostname_Call) RunAndReturn(run func() (string, error)) *MockSystemManager_GetHostname_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogindConf provides a mock function with given fields:
func (_m *MockSystemManager) GetLogindConf() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogindConf")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetLogindConf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogindConf'
type MockSystemManager_GetLogindConf_Call struct {
	*mock.Call
}

// GetLogindConf is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetLogindConf() *MockSystemManager_GetLogindConf_Call {
	return &MockSystemManager_GetLogindConf_Call{Call: _e.mock.On("GetLogindConf")}
}

func (_c *MockSystemManager_GetLogindConf_Call) Run(run func()) *MockSystemManager_GetLogindConf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetLogindConf_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetLogindConf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetLogindConf_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetLogindConf_Call {
	_c.Call.Return(run)
	return _c
}

// GetRCLocal provides a mock function with given fields:
func (_m *MockSystemManager) GetRCLocal() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRCLocal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetRCLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRCLocal'
type MockSystemManager_GetRCLocal_Call struct {
	*mock.Call
}

// GetRCLocal is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetRCLocal() *MockSystemManager_GetRCLocal_Call {
	return &MockSystemManager_GetRCLocal_Call{Call: _e.mock.On("GetRCLocal")}
}

func (_c *MockSystemManager_GetRCLocal_Call) Run(run func()) *MockSystemManager_GetRCLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetRCLocal_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetRCLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetRCLocal_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetRCLocal_Call {
	_c.Call.Return(run)
	return _c
}

// GetSysTimezone provides a mock function with given fields:
func (_m *MockSystemManager) GetSysTimezone() (*time.Location, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSysTimezone")
	}

	var r0 *time.Location
	var r1 error
	if rf, ok := ret.Get(0).(func() (*time.Location, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *time.Location); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Location)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetSysTimezone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSysTimezone'
type MockSystemManager_GetSysTimezone_Call struct {
	*mock.Call
}

// GetSysTimezone is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetSysTimezone() *MockSystemManager_GetSysTimezone_Call {
	return &MockSystemManager_GetSysTimezone_Call{Call: _e.mock.On("GetSysTimezone")}
}

func (_c *MockSystemManager_GetSysTimezone_Call) Run(run func()) *MockSystemManager_GetSysTimezone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetSysTimezone_Call) Return(_a0 *time.Location, _a1 error) *MockSystemManager_GetSysTimezone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetSysTimezone_Call) RunAndReturn(run func() (*time.Location, error)) *MockSystemManager_GetSysTimezone_Call {
	_c.Call.Return(run)
	return _c
}

// GetWatchdogServiceFile provides a mock function with given fields:
func (_m *MockSystemManager) GetWatchdogServiceFile() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWatchdogServiceFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_GetWatchdogServiceFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWatchdogServiceFile'
type MockSystemManager_GetWatchdogServiceFile_Call struct {
	*mock.Call
}

// GetWatchdogServiceFile is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) GetWatchdogServiceFile() *MockSystemManager_GetWatchdogServiceFile_Call {
	return &MockSystemManager_GetWatchdogServiceFile_Call{Call: _e.mock.On("GetWatchdogServiceFile")}
}

func (_c *MockSystemManager_GetWatchdogServiceFile_Call) Run(run func()) *MockSystemManager_GetWatchdogServiceFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_GetWatchdogServiceFile_Call) Return(_a0 []byte, _a1 error) *MockSystemManager_GetWatchdogServiceFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_GetWatchdogServiceFile_Call) RunAndReturn(run func() ([]byte, error)) *MockSystemManager_GetWatchdogServiceFile_Call {
	_c.Call.Return(run)
	return _c
}

// Interfaces provides a mock function with given fields:
func (_m *MockSystemManager) Interfaces() (network.NetInterfaces, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Interfaces")
	}

	var r0 network.NetInterfaces
	var r1 error
	if rf, ok := ret.Get(0).(func() (network.NetInterfaces, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() network.NetInterfaces); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.NetInterfaces)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_Interfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Interfaces'
type MockSystemManager_Interfaces_Call struct {
	*mock.Call
}

// Interfaces is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) Interfaces() *MockSystemManager_Interfaces_Call {
	return &MockSystemManager_Interfaces_Call{Call: _e.mock.On("Interfaces")}
}

func (_c *MockSystemManager_Interfaces_Call) Run(run func()) *MockSystemManager_Interfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_Interfaces_Call) Return(_a0 network.NetInterfaces, _a1 error) *MockSystemManager_Interfaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_Interfaces_Call) RunAndReturn(run func() (network.NetInterfaces, error)) *MockSystemManager_Interfaces_Call {
	_c.Call.Return(run)
	return _c
}

// Reboot provides a mock function with given fields:
func (_m *MockSystemManager) Reboot() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reboot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_Reboot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reboot'
type MockSystemManager_Reboot_Call struct {
	*mock.Call
}

// Reboot is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) Reboot() *MockSystemManager_Reboot_Call {
	return &MockSystemManager_Reboot_Call{Call: _e.mock.On("Reboot")}
}

func (_c *MockSystemManager_Reboot_Call) Run(run func()) *MockSystemManager_Reboot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_Reboot_Call) Return(_a0 error) *MockSystemManager_Reboot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_Reboot_Call) RunAndReturn(run func() error) *MockSystemManager_Reboot_Call {
	_c.Call.Return(run)
	return _c
}

// SetBootConfig provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetBootConfig(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetBootConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetBootConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBootConfig'
type MockSystemManager_SetBootConfig_Call struct {
	*mock.Call
}

// SetBootConfig is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockSystemManager_Expecter) SetBootConfig(_a0 interface{}) *MockSystemManager_SetBootConfig_Call {
	return &MockSystemManager_SetBootConfig_Call{Call: _e.mock.On("SetBootConfig", _a0)}
}

func (_c *MockSystemManager_SetBootConfig_Call) Run(run func(_a0 []byte)) *MockSystemManager_SetBootConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSystemManager_SetBootConfig_Call) Return(_a0 error) *MockSystemManager_SetBootConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetBootConfig_Call) RunAndReturn(run func([]byte) error) *MockSystemManager_SetBootConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetCMDLine provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetCMDLine(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetCMDLine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetCMDLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCMDLine'
type MockSystemManager_SetCMDLine_Call struct {
	*mock.Call
}

// SetCMDLine is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockSystemManager_Expecter) SetCMDLine(_a0 interface{}) *MockSystemManager_SetCMDLine_Call {
	return &MockSystemManager_SetCMDLine_Call{Call: _e.mock.On("SetCMDLine", _a0)}
}

func (_c *MockSystemManager_SetCMDLine_Call) Run(run func(_a0 []byte)) *MockSystemManager_SetCMDLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSystemManager_SetCMDLine_Call) Return(_a0 error) *MockSystemManager_SetCMDLine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetCMDLine_Call) RunAndReturn(run func([]byte) error) *MockSystemManager_SetCMDLine_Call {
	_c.Call.Return(run)
	return _c
}

// SetHostname provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetHostname(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetHostname")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHostname'
type MockSystemManager_SetHostname_Call struct {
	*mock.Call
}

// SetHostname is a helper method to define mock.On call
//   - _a0 string
func (_e *MockSystemManager_Expecter) SetHostname(_a0 interface{}) *MockSystemManager_SetHostname_Call {
	return &MockSystemManager_SetHostname_Call{Call: _e.mock.On("SetHostname", _a0)}
}

func (_c *MockSystemManager_SetHostname_Call) Run(run func(_a0 string)) *MockSystemManager_SetHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemManager_SetHostname_Call) Return(_a0 error) *MockSystemManager_SetHostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetHostname_Call) RunAndReturn(run func(string) error) *MockSystemManager_SetHostname_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogindConf provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetLogindConf(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetLogindConf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetLogindConf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogindConf'
type MockSystemManager_SetLogindConf_Call struct {
	*mock.Call
}

// SetLogindConf is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockSystemManager_Expecter) SetLogindConf(_a0 interface{}) *MockSystemManager_SetLogindConf_Call {
	return &MockSystemManager_SetLogindConf_Call{Call: _e.mock.On("SetLogindConf", _a0)}
}

func (_c *MockSystemManager_SetLogindConf_Call) Run(run func(_a0 []byte)) *MockSystemManager_SetLogindConf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSystemManager_SetLogindConf_Call) Return(_a0 error) *MockSystemManager_SetLogindConf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetLogindConf_Call) RunAndReturn(run func([]byte) error) *MockSystemManager_SetLogindConf_Call {
	_c.Call.Return(run)
	return _c
}

// SetRCLocal provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetRCLocal(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetRCLocal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetRCLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRCLocal'
type MockSystemManager_SetRCLocal_Call struct {
	*mock.Call
}

// SetRCLocal is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockSystemManager_Expecter) SetRCLocal(_a0 interface{}) *MockSystemManager_SetRCLocal_Call {
	return &MockSystemManager_SetRCLocal_Call{Call: _e.mock.On("SetRCLocal", _a0)}
}

func (_c *MockSystemManager_SetRCLocal_Call) Run(run func(_a0 []byte)) *MockSystemManager_SetRCLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSystemManager_SetRCLocal_Call) Return(_a0 error) *MockSystemManager_SetRCLocal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetRCLocal_Call) RunAndReturn(run func([]byte) error) *MockSystemManager_SetRCLocal_Call {
	_c.Call.Return(run)
	return _c
}

// SetSysTimezone provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetSysTimezone(_a0 *time.Location) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetSysTimezone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*time.Location) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetSysTimezone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSysTimezone'
type MockSystemManager_SetSysTimezone_Call struct {
	*mock.Call
}

// SetSysTimezone is a helper method to define mock.On call
//   - _a0 *time.Location
func (_e *MockSystemManager_Expecter) SetSysTimezone(_a0 interface{}) *MockSystemManager_SetSysTimezone_Call {
	return &MockSystemManager_SetSysTimezone_Call{Call: _e.mock.On("SetSysTimezone", _a0)}
}

func (_c *MockSystemManager_SetSysTimezone_Call) Run(run func(_a0 *time.Location)) *MockSystemManager_SetSysTimezone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Location))
	})
	return _c
}

func (_c *MockSystemManager_SetSysTimezone_Call) Return(_a0 error) *MockSystemManager_SetSysTimezone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetSysTimezone_Call) RunAndReturn(run func(*time.Location) error) *MockSystemManager_SetSysTimezone_Call {
	_c.Call.Return(run)
	return _c
}

// SetWatchdogServiceFile provides a mock function with given fields: _a0
func (_m *MockSystemManager) SetWatchdogServiceFile(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetWatchdogServiceFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_SetWatchdogServiceFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWatchdogServiceFile'
type MockSystemManager_SetWatchdogServiceFile_Call struct {
	*mock.Call
}

// SetWatchdogServiceFile is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockSystemManager_Expecter) SetWatchdogServiceFile(_a0 interface{}) *MockSystemManager_SetWatchdogServiceFile_Call {
	return &MockSystemManager_SetWatchdogServiceFile_Call{Call: _e.mock.On("SetWatchdogServiceFile", _a0)}
}

func (_c *MockSystemManager_SetWatchdogServiceFile_Call) Run(run func(_a0 []byte)) *MockSystemManager_SetWatchdogServiceFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSystemManager_SetWatchdogServiceFile_Call) Return(_a0 error) *MockSystemManager_SetWatchdogServiceFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_SetWatchdogServiceFile_Call) RunAndReturn(run func([]byte) error) *MockSystemManager_SetWatchdogServiceFile_Call {
	_c.Call.Return(run)
	return _c
}

// TailscaleConnected provides a mock function with given fields:
func (_m *MockSystemManager) TailscaleConnected() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TailscaleConnected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemManager_TailscaleConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TailscaleConnected'
type MockSystemManager_TailscaleConnected_Call struct {
	*mock.Call
}

// TailscaleConnected is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) TailscaleConnected() *MockSystemManager_TailscaleConnected_Call {
	return &MockSystemManager_TailscaleConnected_Call{Call: _e.mock.On("TailscaleConnected")}
}

func (_c *MockSystemManager_TailscaleConnected_Call) Run(run func()) *MockSystemManager_TailscaleConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_TailscaleConnected_Call) Return(_a0 bool, _a1 error) *MockSystemManager_TailscaleConnected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemManager_TailscaleConnected_Call) RunAndReturn(run func() (bool, error)) *MockSystemManager_TailscaleConnected_Call {
	_c.Call.Return(run)
	return _c
}

// TailscaleDown provides a mock function with given fields:
func (_m *MockSystemManager) TailscaleDown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TailscaleDown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_TailscaleDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TailscaleDown'
type MockSystemManager_TailscaleDown_Call struct {
	*mock.Call
}

// TailscaleDown is a helper method to define mock.On call
func (_e *MockSystemManager_Expecter) TailscaleDown() *MockSystemManager_TailscaleDown_Call {
	return &MockSystemManager_TailscaleDown_Call{Call: _e.mock.On("TailscaleDown")}
}

func (_c *MockSystemManager_TailscaleDown_Call) Run(run func()) *MockSystemManager_TailscaleDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemManager_TailscaleDown_Call) Return(_a0 error) *MockSystemManager_TailscaleDown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_TailscaleDown_Call) RunAndReturn(run func() error) *MockSystemManager_TailscaleDown_Call {
	_c.Call.Return(run)
	return _c
}

// TailscaleUp provides a mock function with given fields: authKey, tags
func (_m *MockSystemManager) TailscaleUp(authKey string, tags []string) error {
	ret := _m.Called(authKey, tags)

	if len(ret) == 0 {
		panic("no return value specified for TailscaleUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(authKey, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemManager_TailscaleUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TailscaleUp'
type MockSystemManager_TailscaleUp_Call struct {
	*mock.Call
}

// TailscaleUp is a helper method to define mock.On call
//   - authKey string
//   - tags []string
func (_e *MockSystemManager_Expecter) TailscaleUp(authKey interface{}, tags interface{}) *MockSystemManager_TailscaleUp_Call {
	return &MockSystemManager_TailscaleUp_Call{Call: _e.mock.On("TailscaleUp", authKey, tags)}
}

func (_c *MockSystemManager_TailscaleUp_Call) Run(run func(authKey string, tags []string)) *MockSystemManager_TailscaleUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockSystemManager_TailscaleUp_Call) Return(_a0 error) *MockSystemManager_TailscaleUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemManager_TailscaleUp_Call) RunAndReturn(run func(string, []string) error) *MockSystemManager_TailscaleUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystemManager creates a new instance of MockSystemManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemManager {
	mock := &MockSystemManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
