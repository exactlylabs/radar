// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	geo "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/geo"
	mock "github.com/stretchr/testify/mock"
)

// GeoJSONServer is an autogenerated mock type for the GeoJSONServer type
type GeoJSONServer struct {
	mock.Mock
}

// Get provides a mock function with no fields
func (_m *GeoJSONServer) Get() (geo.GeoJSON, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 geo.GeoJSON
	var r1 error
	if rf, ok := ret.Get(0).(func() (geo.GeoJSON, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() geo.GeoJSON); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(geo.GeoJSON)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with no fields
func (_m *GeoJSONServer) Load() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGeoJSONServer creates a new instance of GeoJSONServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoJSONServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoJSONServer {
	mock := &GeoJSONServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
