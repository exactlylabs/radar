// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	geo "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/geo"
	mock "github.com/stretchr/testify/mock"

	namespaces "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/namespaces"
)

// VectorTile is an autogenerated mock type for the VectorTile type
type VectorTile struct {
	mock.Mock
}

// GetFeatures provides a mock function with given fields: layer
func (_m *VectorTile) GetFeatures(layer namespaces.Namespace) ([]geo.Feature, error) {
	ret := _m.Called(layer)

	var r0 []geo.Feature
	if rf, ok := ret.Get(0).(func(namespaces.Namespace) []geo.Feature); ok {
		r0 = rf(layer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]geo.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(namespaces.Namespace) error); ok {
		r1 = rf(layer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Layers provides a mock function with given fields:
func (_m *VectorTile) Layers() []namespaces.Namespace {
	ret := _m.Called()

	var r0 []namespaces.Namespace
	if rf, ok := ret.Get(0).(func() []namespaces.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]namespaces.Namespace)
		}
	}

	return r0
}

// Marshal provides a mock function with given fields: gziped, layers
func (_m *VectorTile) Marshal(gziped bool, layers ...namespaces.Namespace) ([]byte, error) {
	_va := make([]interface{}, len(layers))
	for _i := range layers {
		_va[_i] = layers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gziped)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(bool, ...namespaces.Namespace) []byte); ok {
		r0 = rf(gziped, layers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, ...namespaces.Namespace) error); ok {
		r1 = rf(gziped, layers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Range provides a mock function with given fields: _a0
func (_m *VectorTile) Range(_a0 func(namespaces.Namespace, geo.Feature) (bool, error)) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(namespaces.Namespace, geo.Feature) (bool, error)) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewVectorTile interface {
	mock.TestingT
	Cleanup(func())
}

// NewVectorTile creates a new instance of VectorTile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVectorTile(t mockConstructorTestingTNewVectorTile) *VectorTile {
	mock := &VectorTile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
