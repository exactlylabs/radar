// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	geo "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/geo"
	mock "github.com/stretchr/testify/mock"
)

// GeoJSON is an autogenerated mock type for the GeoJSON type
type GeoJSON struct {
	mock.Mock
}

// FindFeatureByProperty provides a mock function with given fields: key, value
func (_m *GeoJSON) FindFeatureByProperty(key string, value interface{}) geo.Feature {
	ret := _m.Called(key, value)

	var r0 geo.Feature
	if rf, ok := ret.Get(0).(func(string, interface{}) geo.Feature); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(geo.Feature)
		}
	}

	return r0
}

// GetFeatures provides a mock function with given fields:
func (_m *GeoJSON) GetFeatures() []geo.Feature {
	ret := _m.Called()

	var r0 []geo.Feature
	if rf, ok := ret.Get(0).(func() []geo.Feature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]geo.Feature)
		}
	}

	return r0
}

// Marshal provides a mock function with given fields: gziped
func (_m *GeoJSON) Marshal(gziped bool) ([]byte, error) {
	ret := _m.Called(gziped)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]byte, error)); ok {
		return rf(gziped)
	}
	if rf, ok := ret.Get(0).(func(bool) []byte); ok {
		r0 = rf(gziped)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(gziped)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGeoJSON creates a new instance of GeoJSON. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoJSON(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoJSON {
	mock := &GeoJSON{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
