// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	namespaces "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/namespaces"
	storages "github.com/exactlylabs/mlab-mapping/backend/pkg/app/ports/storages"
	mock "github.com/stretchr/testify/mock"
)

// GeospaceStorage is an autogenerated mock type for the GeospaceStorage type
type GeospaceStorage struct {
	mock.Mock
}

// All provides a mock function with given fields: limit, offset
func (_m *GeospaceStorage) All(limit *int, offset *int) (storages.Iterator[*storages.DetailedGeospace], error) {
	ret := _m.Called(limit, offset)

	var r0 storages.Iterator[*storages.DetailedGeospace]
	var r1 error
	if rf, ok := ret.Get(0).(func(*int, *int) (storages.Iterator[*storages.DetailedGeospace], error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*int, *int) storages.Iterator[*storages.DetailedGeospace]); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.DetailedGeospace])
		}
	}

	if rf, ok := ret.Get(1).(func(*int, *int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllFromNamespace provides a mock function with given fields: namespace, limit, offset
func (_m *GeospaceStorage) AllFromNamespace(namespace namespaces.Namespace, limit *int, offset *int) (storages.Iterator[*storages.DetailedGeospace], error) {
	ret := _m.Called(namespace, limit, offset)

	var r0 storages.Iterator[*storages.DetailedGeospace]
	var r1 error
	if rf, ok := ret.Get(0).(func(namespaces.Namespace, *int, *int) (storages.Iterator[*storages.DetailedGeospace], error)); ok {
		return rf(namespace, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(namespaces.Namespace, *int, *int) storages.Iterator[*storages.DetailedGeospace]); ok {
		r0 = rf(namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.DetailedGeospace])
		}
	}

	if rf, ok := ret.Get(1).(func(namespaces.Namespace, *int, *int) error); ok {
		r1 = rf(namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *GeospaceStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *GeospaceStorage) Connected() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: g
func (_m *GeospaceStorage) Create(g *storages.Geospace) error {
	ret := _m.Called(g)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storages.Geospace) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *GeospaceStorage) Get(id string) (*storages.DetailedGeospace, error) {
	ret := _m.Called(id)

	var r0 *storages.DetailedGeospace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storages.DetailedGeospace, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *storages.DetailedGeospace); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.DetailedGeospace)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGeoId provides a mock function with given fields: namespace, geoId
func (_m *GeospaceStorage) GetByGeoId(namespace namespaces.Namespace, geoId string) (*storages.DetailedGeospace, error) {
	ret := _m.Called(namespace, geoId)

	var r0 *storages.DetailedGeospace
	var r1 error
	if rf, ok := ret.Get(0).(func(namespaces.Namespace, string) (*storages.DetailedGeospace, error)); ok {
		return rf(namespace, geoId)
	}
	if rf, ok := ret.Get(0).(func(namespaces.Namespace, string) *storages.DetailedGeospace); ok {
		r0 = rf(namespace, geoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.DetailedGeospace)
		}
	}

	if rf, ok := ret.Get(1).(func(namespaces.Namespace, string) error); ok {
		r1 = rf(namespace, geoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *GeospaceStorage) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: query, limit, offset
func (_m *GeospaceStorage) Search(query string, limit *int, offset *int) (storages.Iterator[*storages.DetailedGeospace], error) {
	ret := _m.Called(query, limit, offset)

	var r0 storages.Iterator[*storages.DetailedGeospace]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *int, *int) (storages.Iterator[*storages.DetailedGeospace], error)); ok {
		return rf(query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, *int, *int) storages.Iterator[*storages.DetailedGeospace]); ok {
		r0 = rf(query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.DetailedGeospace])
		}
	}

	if rf, ok := ret.Get(1).(func(string, *int, *int) error); ok {
		r1 = rf(query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFromNamespace provides a mock function with given fields: query, namespace, limit, offset
func (_m *GeospaceStorage) SearchFromNamespace(query string, namespace namespaces.Namespace, limit *int, offset *int) (storages.Iterator[*storages.DetailedGeospace], error) {
	ret := _m.Called(query, namespace, limit, offset)

	var r0 storages.Iterator[*storages.DetailedGeospace]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, namespaces.Namespace, *int, *int) (storages.Iterator[*storages.DetailedGeospace], error)); ok {
		return rf(query, namespace, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, namespaces.Namespace, *int, *int) storages.Iterator[*storages.DetailedGeospace]); ok {
		r0 = rf(query, namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storages.Iterator[*storages.DetailedGeospace])
		}
	}

	if rf, ok := ret.Get(1).(func(string, namespaces.Namespace, *int, *int) error); ok {
		r1 = rf(query, namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: g
func (_m *GeospaceStorage) Update(g *storages.Geospace) error {
	ret := _m.Called(g)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storages.Geospace) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGeospaceStorage creates a new instance of GeospaceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeospaceStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeospaceStorage {
	mock := &GeospaceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
