// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Feature is an autogenerated mock type for the Feature type
type Feature struct {
	mock.Mock
}

// GetProperties provides a mock function with no fields
func (_m *Feature) GetProperties() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProperties")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// SetProperty provides a mock function with given fields: key, value
func (_m *Feature) SetProperty(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeature creates a new instance of Feature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeature(t interface {
	mock.TestingT
	Cleanup(func())
}) *Feature {
	mock := &Feature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
