---
import Navbar from "../components/common/layout/Navbar.astro";
import Footer from "../components/common/layout/Footer.astro";
import styles from './styles/parallax_layout.module.css';
import '../layouts/styles/layout.module.css';
import BaseHead from "../components/common/layout/BaseHead.astro";
import { Image } from 'astro:assets';

const { bgImageSrc, title, description } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <BaseHead title={title} description={description}/>
  </head>
  <body>
    <main class={styles.parallaxContainer} id="parallax-scrollable-container">
      <div id="parallax-background-image"
           class={styles.parallaxBackgroundImage}
      >
        <Image
          src={bgImageSrc}
          alt="Parallax Background Image"
          loading="eager"
          quality={'high'}
          format='webp'
          widths={[bgImageSrc.width/2, bgImageSrc.width]}
          sizes={`(max-width: 768px) ${bgImageSrc.width/2}px, ${bgImageSrc.width}px`}
        />
      </div>
      <Navbar/>
      <slot />
      <Footer/>
    </main>
    
    <script>
      const scrollableContainer = document.getElementById("parallax-scrollable-container")!;
      scrollableContainer.style.overflowY = 'hidden';
      
      const parallaxImageContainer = (document.getElementById("parallax-background-image")! as HTMLDivElement);
      const parallaxImage = parallaxImageContainer.querySelector('img')!;
      let initialParallaxImageHeight = 0;
      let initialWhiteLineHeight = 0;
      let pixelsWhenScaleIsOne = -1;
      let totalPixelsToBeScrolledUntilSwap = -1;
    
      function initialSetup() {
        const scrollableContainer = document.getElementById("parallax-scrollable-container")!;
        const scrollPercentage = scrollableContainer.scrollTop / window.innerHeight;
        
        const mainHero = document.getElementById("parallax-main-hero-text")!;
        const parallaxOverlay = document.querySelector('#parallax-overlay') as HTMLElement;
        
        const initialParallaxOverlayOpacity = 0.70;
        const newOpacity = initialParallaxOverlayOpacity - initialParallaxOverlayOpacity * scrollPercentage;
        parallaxOverlay.style.opacity = newOpacity.toString();
        mainHero.style.opacity = (1 - scrollPercentage * 2).toString();
        
        const whiteLine = document.getElementById("vertical-white-line")!;
        whiteLine.style.opacity = `${1 - scrollPercentage / 2}`;
        const { bottom } = mainHero.getBoundingClientRect();
        const { top: whiteLineTop } = whiteLine.getBoundingClientRect();
        const whiteLineColor = 'rgba(255, 255, 255, 0.2)';
        if(bottom >= whiteLineTop) {
          const percentageOverlap = (bottom - whiteLineTop) / whiteLine.clientHeight;
          whiteLine.style.background = `linear-gradient(to bottom, transparent 0%, transparent ${percentageOverlap * 100}%, ${whiteLineColor} ${percentageOverlap * 100 + 1}%, ${whiteLineColor} 100%)`;
        } else {
          whiteLine.style.height = `${initialWhiteLineHeight}px`;
          whiteLine.style.background = `linear-gradient(to bottom, ${whiteLineColor} 0%, ${whiteLineColor} 100%)`;
        }
        whiteLine.style.bottom = `${scrollPercentage * 100}%`;
        whiteLine.style.opacity = `${1 - scrollPercentage / 2}`;
        
        const {
          top: incomingImageTop,
          bottom: incomingImageBottom,
          width: referenceWidth,
        } = document.getElementById("parallax-content-image")!.getBoundingClientRect();
        
        return { incomingImageTop, incomingImageBottom, referenceWidth };
      }
      
      function getReferences() {
        const incomingImage = document.getElementById("parallax-content-image")! as HTMLImageElement;
        const parallaxImageContainer = document.getElementById("parallax-background-image")! as HTMLDivElement;
        const parallaxImage = parallaxImageContainer.querySelector('img')!;
        const currentPixelsScrolled = document.getElementById("parallax-scrollable-container")!.scrollTop;
        const incomingText = document.getElementById("parallax-reference-container")!;
        return { incomingImage, parallaxImage, parallaxImageContainer, currentPixelsScrolled, incomingText };
      }
      
      function swapIfNecessary(incomingImage: HTMLImageElement, parallaxImageContainer: HTMLDivElement) {
        const { bottom: incomingBottom} = incomingImage.getBoundingClientRect();
        const { bottom: parallaxBottom} = parallaxImageContainer.getBoundingClientRect();
        if(incomingBottom <= parallaxBottom) {
          parallaxImageContainer.style.opacity = '0';
          incomingImage.style.opacity = '1';
        } else {
          parallaxImageContainer.style.opacity = '1';
          incomingImage.style.opacity = '0';
        }
      }
      
      function handleResponsiveMainParallaxImage() {
        initialSetup();
        const { incomingImage, parallaxImageContainer, parallaxImage, currentPixelsScrolled } = getReferences();
        const THREE_REM = 3 * 16;
        const NAVBAR_HEIGHT = 72;
        const referenceHeight = incomingImage.height;
        const totalPixelsToBeScrolledUntilSwap = referenceHeight + THREE_REM - NAVBAR_HEIGHT;
        let percentageScrolled = currentPixelsScrolled / totalPixelsToBeScrolledUntilSwap;
        let newScale = 1.25 - (0.25 * percentageScrolled);
        newScale = newScale < 1 ? 1 : newScale;
        parallaxImage.style.scale = `${newScale}`;
        
        const newTop = 0 - (THREE_REM * percentageScrolled);
        parallaxImageContainer.style.top = `${newTop}px`;
        
        swapIfNecessary(incomingImage, parallaxImageContainer);
      }
      
      function getPixelsLeftUntilSwap() {
        const { incomingImage, currentPixelsScrolled } = getReferences();
        return incomingImage.height - currentPixelsScrolled;
      }
      
      function handleMainParallaxImage() {
        const { incomingImage, parallaxImageContainer, parallaxImage, currentPixelsScrolled, incomingText } = getReferences();
        const SIX_REM = 6 * 16;
        const referenceHeight = incomingImage.height;
        if(totalPixelsToBeScrolledUntilSwap === -1) totalPixelsToBeScrolledUntilSwap = getPixelsLeftUntilSwap();
        let percentageScrolled = currentPixelsScrolled / totalPixelsToBeScrolledUntilSwap;
        // modify scale
        const newScale = Math.max(1, 1.5 - (0.5 * percentageScrolled));
        parallaxImage.style.scale = `${newScale}`;
        
        if(newScale === 1 && pixelsWhenScaleIsOne === -1) pixelsWhenScaleIsOne = currentPixelsScrolled;
        
        const {top: incomingTextTop} = incomingText.getBoundingClientRect();
        if(newScale === 1) {
          const currentImageHeight = parallaxImageContainer.clientHeight;
          const diffBetweenImageHeight = initialParallaxImageHeight - referenceHeight;
          const PLACE_ON_SCREEN_TO_BE_COMPLETE = 0.5;
          const rateOfChange = diffBetweenImageHeight / (window.innerHeight * PLACE_ON_SCREEN_TO_BE_COMPLETE);
          let newHeight = initialParallaxImageHeight - (rateOfChange * (currentPixelsScrolled - pixelsWhenScaleIsOne));
          newHeight = newHeight < referenceHeight ? referenceHeight : newHeight;
          parallaxImageContainer.style.height = `${newHeight}px`;
          const newTop = -1 * SIX_REM + incomingTextTop - (currentImageHeight - newHeight) - newHeight;
          parallaxImageContainer.style.top = `${newTop}px`;
        } else {
          parallaxImageContainer.style.height = `${initialParallaxImageHeight}px`;
          parallaxImageContainer.style.top = `0`;
        }
        
        const { top: parallaxImageContainerTop } = parallaxImageContainer.getBoundingClientRect();
        if(parallaxImageContainerTop !== 0) {
          parallaxImageContainer.style.borderBottomLeftRadius = '1rem';
          parallaxImageContainer.style.borderBottomRightRadius = '1rem';
        } else {
          parallaxImageContainer.style.borderBottomLeftRadius = '0';
          parallaxImageContainer.style.borderBottomRightRadius = '0';
        }
        
      }
      
      function resetVerticalShiftedImages() {
        const verticalShiftedImagesLeft = document.querySelectorAll("img[data-image-type='vertical-offset'][data-position='left']")! as NodeListOf<HTMLImageElement>;
        Array.from<HTMLImageElement>(verticalShiftedImagesLeft).forEach((verticalShiftImageLeft: HTMLImageElement) => {
          const parent = verticalShiftImageLeft.parentElement!;
          const verticalShiftImageRight = parent.querySelector("img[data-image-type='vertical-offset'][data-position='right']")! as HTMLImageElement;
          verticalShiftImageLeft.style.marginTop = '0';
          verticalShiftImageRight.style.marginBottom = '0';
        });
      }
      
      function handleVerticallyShiftedImages() {
        const verticalShiftedImagesLeft = document.querySelectorAll("img[data-image-type='vertical-offset'][data-position='left']")! as NodeListOf<HTMLImageElement>;
        Array.from<HTMLImageElement>(verticalShiftedImagesLeft).forEach((verticalShiftImageLeft: HTMLImageElement) => {
          const parent = verticalShiftImageLeft.parentElement!;
          const { top: leftTop } = verticalShiftImageLeft.getBoundingClientRect();
          const verticalShiftImageRight = parent.querySelector("img[data-image-type='vertical-offset'][data-position='right']")! as HTMLImageElement;
          if(leftTop <= window.innerHeight) {
            const topPercentage = leftTop / window.innerHeight;
            const initialMargin = -40;
            const marginShift = 80;
            const newValue = initialMargin + (marginShift * (1 - topPercentage));
            verticalShiftImageLeft.style.marginTop = `${newValue}px`;
            verticalShiftImageRight.style.marginBottom = `${newValue}px`;
          }
        });
      }
      
      function handleHorizontalShiftImages() {
        const horizontalShiftImage = document.getElementById("horizontal-shift-image")!;
        if(!horizontalShiftImage) return;
        const {top: horizontalShiftTop} = horizontalShiftImage.getBoundingClientRect();
        const targetShiftPx = 100;
        if (horizontalShiftTop <= window.innerHeight) {
          const topPercentage = horizontalShiftTop / window.innerHeight;
          const newValue = targetShiftPx * (1 - topPercentage);
          horizontalShiftImage.style.transform = `translate3d(calc(-45% - ${newValue}px), -50%, 0)`;
        }
      }
      
      function resetThreeImageCarrousel() {
        const threeImageCarrousel = document.getElementById("three-image-carrousel")!;
        if(!threeImageCarrousel) return;
        threeImageCarrousel.style.left = '0';
      }
      
      function handleThreeImageCarrousel() {
        const threeImageCarrousel = document.getElementById("three-image-carrousel")!;
        if(!threeImageCarrousel) return;
        const { top: carrouselTop } = threeImageCarrousel.getBoundingClientRect();
        const firstImage = threeImageCarrousel.querySelector('img')!;
        const targetShiftPx = firstImage.getBoundingClientRect().width / 4;
        if(carrouselTop <= window.innerHeight) {
          const topPercentage = carrouselTop / window.innerHeight;
          let newValue = targetShiftPx * (1 - topPercentage);
          threeImageCarrousel.style.left = `-${newValue}px`;
        }
      }
      
      function handleScroll() {
        const windowWidth = window.innerWidth;
        if(windowWidth > 768) {
          handleMainParallaxImage();
          handleVerticallyShiftedImages();
          handleHorizontalShiftImages();
          handleThreeImageCarrousel();
        } else {
          resetVerticalShiftedImages();
          resetThreeImageCarrousel();
          handleResponsiveMainParallaxImage();
        }
      }
      
      
      // Need to "lock" the scrollable container until the image is loaded so that we can get
      // the actual image dimensions post-render
      function handleLoadedImage() {
        pixelsWhenScaleIsOne = -1;
        totalPixelsToBeScrolledUntilSwap = -1;
        scrollableContainer.style.overflowY = 'auto';
        initialParallaxImageHeight = parallaxImageContainer.clientHeight;
        initialWhiteLineHeight = document.getElementById("vertical-white-line")!.clientHeight;
        document.getElementById("parallax-scrollable-container")!.removeEventListener('scroll', handleScroll);
        document.getElementById("parallax-scrollable-container")!.addEventListener('scroll', handleScroll);
        if(window.innerWidth > 768) {
          handleMainParallaxImage();
          handleVerticallyShiftedImages();
          handleHorizontalShiftImages();
          handleThreeImageCarrousel();
        } else {
          resetVerticalShiftedImages();
          resetThreeImageCarrousel();
          handleResponsiveMainParallaxImage();
        }
      }
      
      if(!parallaxImage.complete) {
        parallaxImage.onload = handleLoadedImage;
      } else {
        handleLoadedImage();
      }
      
      window.addEventListener('resize', handleLoadedImage);
    </script>
</body>
</html>
